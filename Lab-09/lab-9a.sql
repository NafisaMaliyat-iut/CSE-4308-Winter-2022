conn system/123;
conn S200042133/nafisamaliyat;

@C:\Users\user\Documents\DBMS_LAB\Lab-9A\banking.sql;



--1(a)
SET SERVEROUTPUT ON SIZE 1000000
BEGIN
DBMS_OUTPUT.PUT_LINE('200042133');
END ;
/


--1(b)
DECLARE
NAME VARCHAR2 (20);
BEGIN
NAME := '&name ';
DBMS_OUTPUT.PUT_LINE('Length of my name is ' || Length(NAME) );
END ;
/


--1(c)
DECLARE
NUMBER1 NUMBER;
NUMBER2 NUMBER;
BEGIN
NUMBER1 := '& number1 ';
NUMBER2 := '& number2 ';
DBMS_OUTPUT.PUT_LINE('Sum of the numbers is ' || TO_CHAR(NUMBER1 + NUMBER2) );
END ;
/

--1(d)
DECLARE
D DATE := SYSDATE ;
BEGIN
DBMS_OUTPUT . PUT_LINE (TO_CHAR(D, 'HH24:MI:SS'));
END ;
/


--1(e) WITHOUT CASE
DECLARE
X NUMBER ;
BEGIN
X := '& number';
X := MOD(X, 2);
IF (X = 0) THEN
DBMS_OUTPUT . PUT_LINE ( 'X is even');
ELSE
DBMS_OUTPUT . PUT_LINE ( 'X is odd');
END IF;
END ;
/

--1(e) WITH CASE
DECLARE
X NUMBER ;
BEGIN
X := '& x';
X := MOD(X, 2);
CASE X
WHEN 0 THEN
DBMS_OUTPUT . PUT_LINE ( 'X is even');
ELSE
DBMS_OUTPUT . PUT_LINE ( 'X is odd');
END CASE ;
END ;
/


--1(f)
CREATE OR REPLACE 
PROCEDURE CHECK_PRIME (Y IN NUMBER, IS_PRIME OUT NUMBER)
AS
BEGIN
IS_PRIME:=1;
  for i in 2..Y/2
    loop
        if (mod(y, i) = 0) then
        IS_PRIME:=0;
        exit;
        end if;
    end loop;
END ;
/
DECLARE
IS_PRIME NUMBER ;
Y NUMBER;
BEGIN
Y := '& y';
CHECK_PRIME (y , IS_PRIME );
IF(IS_PRIME = 0) THEN
    DBMS_OUTPUT . PUT_LINE ( 'NOT PRIME' );
ELSE
    DBMS_OUTPUT . PUT_LINE ( 'IS PRIME' );
END IF;
END;
/

--2(a)
--using query in n>maxrow
--using the return statement
--rownum<=N
--various syntax error such as not adding then in block
                                --not adding loop in for loop block
CREATE OR REPLACE 
PROCEDURE N_RICHEST_BRANCHES(N IN NUMBER)
AS
MAX_ROW NUMBER;
CHECK_BRANCH NUMBER;
BEGIN
SELECT COUNT(BRANCH_NAME) INTO MAX_ROW
FROM BRANCH;

IF(N > MAX_ROW) THEN
    DBMS_OUTPUT . PUT_LINE ('N IS TOO LARGE!');
    RETURN;
END IF;

FOR i IN (SELECT *
        FROM (SELECT *
            FROM BRANCH
            ORDER BY ASSETS DESC)
        WHERE rownum <= N) loop 
    DBMS_OUTPUT . PUT_LINE ('Branch name: ' || i.branch_name || ', Branch city: ' || i.branch_city || ', Assets: ' || i.assets);
END LOOP;
END;
/

BEGIN
    N_RICHEST_BRANCHES(5);
    N_RICHEST_BRANCHES(1000);
END;
/



--2(b)
--couldnt use natural join
--couldnt define varchar2 length of customer name
--thought of 
CREATE OR REPLACE 
PROCEDURE FIND_CUSTOMER_STATUS(C_NAME IN VARCHAR2)
AS
    NET_LOAN NUMBER := 0;
    NET_BALANCE NUMBER :=0;
    CHECK_CUSTOMER NUMBER:=0;
    CHECK_DEPOSITOR NUMBER;
    CHECK_BORROWER NUMBER;
BEGIN
    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_CUSTOMER
    FROM CUSTOMER 
    WHERE CUSTOMER_NAME = C_NAME;

    IF(CHECK_CUSTOMER = 0) THEN
        DBMS_OUTPUT.PUT_LINE('User does not exist!');
        RETURN;
    END IF;

    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_DEPOSITOR
    FROM DEPOSITOR 
    WHERE CUSTOMER_NAME = C_NAME;

    IF(CHECK_DEPOSITOR = 0) THEN 
        NET_BALANCE:=0;
    ELSE
        SELECT SUM(ACCOUNT.BALANCE) INTO NET_BALANCE
        FROM DEPOSITOR, ACCOUNT
        WHERE DEPOSITOR.ACCOUNT_NUMBER = ACCOUNT.ACCOUNT_NUMBER
        GROUP BY DEPOSITOR.CUSTOMER_NAME 
        HAVING DEPOSITOR.CUSTOMER_NAME = C_NAME;
    END IF;

    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_BORROWER
    FROM BORROWER
    WHERE CUSTOMER_NAME = C_NAME;

    IF(CHECK_BORROWER = 0) THEN 
        NET_LOAN:=0;
    ELSE
        SELECT SUM(LOAN.AMOUNT) INTO NET_LOAN
        FROM BORROWER, LOAN
        WHERE BORROWER.LOAN_NUMBER = LOAN.LOAN_NUMBER
        GROUP BY BORROWER.CUSTOMER_NAME
        HAVING BORROWER.CUSTOMER_NAME = C_NAME;
    
    END IF;
 
    IF((NET_LOAN) > (NET_BALANCE)) THEN
        DBMS_OUTPUT . PUT_LINE('Red Zone');
    ELSE
        DBMS_OUTPUT . PUT_LINE('Green Zone');
    END IF;
END;
/

DECLARE
    CUSTOMER_NAME VARCHAR2(15);
BEGIN
    CUSTOMER_NAME:='&CUSTOMER_NAME';
    FIND_CUSTOMER_STATUS(CUSTOMER_NAME);
END;
/


--2c
CREATE OR REPLACE 
FUNCTION CALC_TAX(C_NAME VARCHAR2)
RETURN NUMERIC
IS
    TAX NUMERIC;
    NET_BALANCE NUMERIC;
    CHECK_CUSTOMER NUMBER:=0;
    CHECK_DEPOSITOR NUMBER;
BEGIN
    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_CUSTOMER
    FROM CUSTOMER 
    WHERE CUSTOMER_NAME = C_NAME;

    IF(CHECK_CUSTOMER = 0) THEN
        DBMS_OUTPUT.PUT_LINE('User does not exist!');
        RETURN -1;
    END IF;

    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_DEPOSITOR
    FROM DEPOSITOR 
    WHERE CUSTOMER_NAME = C_NAME;

    IF(CHECK_DEPOSITOR = 0) THEN 
        NET_BALANCE:=0;
    ELSE
        SELECT SUM(ACCOUNT.BALANCE) INTO NET_BALANCE
        FROM DEPOSITOR, ACCOUNT
        WHERE DEPOSITOR.ACCOUNT_NUMBER = ACCOUNT.ACCOUNT_NUMBER
        GROUP BY DEPOSITOR.CUSTOMER_NAME 
        HAVING DEPOSITOR.CUSTOMER_NAME = C_NAME;
    END IF;

    IF(NET_BALANCE <750) then
        DBMS_OUTPUT . PUT_LINE('User is not eligible!');
        RETURN -1;

    ELSE
        TAX := .08 * NET_BALANCE;
        RETURN TAX;
    END IF;

    
END;
/

DECLARE
    C_NAME VARCHAR2(15);
BEGIN
    C_NAME:='& C_NAME';
    DBMS_OUTPUT . PUT_LINE('Tax: ' || CALC_TAX(C_NAME));
END;
/



--2d
CREATE OR REPLACE 
FUNCTION CUSTOMER_CATEGORY(C_NAME VARCHAR2)
RETURN VARCHAR2
IS
    CATEGORY VARCHAR2(4);
    NET_BALANCE NUMBER;
    NET_LOAN NUMBER;
    CHECK_CUSTOMER NUMBER;
    CHECK_DEPOSITOR NUMBER;
    CHECK_BORROWER NUMBER;
BEGIN
    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_CUSTOMER
    FROM CUSTOMER 
    WHERE CUSTOMER_NAME = C_NAME;
    IF(CHECK_CUSTOMER = 0) THEN
        DBMS_OUTPUT.PUT_LINE('User does not exist!');
        RETURN 'N/A';
    END IF; 

    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_DEPOSITOR
    FROM DEPOSITOR 
    WHERE CUSTOMER_NAME = C_NAME;
    IF(CHECK_DEPOSITOR = 0) THEN 
        NET_BALANCE:=0;
    ELSE
        SELECT SUM(ACCOUNT.BALANCE) INTO NET_BALANCE
        FROM DEPOSITOR, ACCOUNT
        WHERE DEPOSITOR.ACCOUNT_NUMBER = ACCOUNT.ACCOUNT_NUMBER
        GROUP BY DEPOSITOR.CUSTOMER_NAME 
        HAVING DEPOSITOR.CUSTOMER_NAME = C_NAME;
    END IF;

    SELECT COUNT(CUSTOMER_NAME) INTO CHECK_BORROWER
    FROM BORROWER
    WHERE CUSTOMER_NAME = C_NAME;
    IF(CHECK_BORROWER = 0) THEN 
        NET_LOAN:=0;
    ELSE
        SELECT SUM(LOAN.AMOUNT) INTO NET_LOAN
        FROM BORROWER, LOAN
        WHERE BORROWER.LOAN_NUMBER = LOAN.LOAN_NUMBER
        GROUP BY BORROWER.CUSTOMER_NAME
        HAVING BORROWER.CUSTOMER_NAME = C_NAME;
    END IF;


    IF(NET_BALANCE>1000 AND NET_LOAN<1000) THEN
        CATEGORY:='C-A1';
    ELSIF(NET_BALANCE < 500 AND NET_LOAN > 2000) THEN
        CATEGORY:='C-C3';
    ELSE
        CATEGORY:='C-B1';
    END IF;

    RETURN CATEGORY;
    
END;
/

DECLARE
    C_NAME VARCHAR2(15);
BEGIN
    C_NAME:='& C_NAME';
    DBMS_OUTPUT . PUT_LINE('Category: ' || CUSTOMER_CATEGORY(C_NAME));
END;
/
