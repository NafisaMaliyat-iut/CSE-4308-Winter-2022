conn system/123;
conn S200042133/nafisamaliyat;

@C:\Users\user\Documents\DBMS_LAB\Lab-10A\DDL+drop.sql;
@C:\Users\user\Documents\DBMS_LAB\Lab-10A\smallRelationsInsertFile.sql;


--1
SET SERVEROUTPUT ON SIZE 1000000
CREATE OR REPLACE PROCEDURE UPDATE_INSTRUCTOR_SALARY
AS
TOTAL_ROWS NUMBER (2);
BEGIN
UPDATE INSTRUCTOR
SET SALARY = SALARY * 1.1
WHERE SALARY < 75000 ;
IF SQL% NOTFOUND THEN
DBMS_OUTPUT . PUT_LINE ( 'No instructor satisfied the condition ');
ELSE
DBMS_OUTPUT . PUT_LINE ( SQL%ROWCOUNT || ' instructors updated ');
END IF;
END ;
/

BEGIN
UPDATE_INSTRUCTOR_SALARY;
END;
/

--2
CREATE OR REPLACE PROCEDURE SHOW_TIME_SLOT
AS 
BEGIN
FOR i IN (SELECT NAME, ID, DAY, START_HR, START_MIN, END_HR, END_MIN
        FROM INSTRUCTOR NATURAL JOIN TEACHES NATURAL JOIN SECTION NATURAL JOIN TIME_SLOT
        ) LOOP
DBMS_OUTPUT.PUT_LINE('Name: ' || i.NAME || ', ID: ' || i.ID || ', Day: ' || i.DAY || ', Start time: ' || i.START_HR ||
                        ' : ' || i.START_MIN || ', End time: ' || i.END_HR || ' : '|| i.END_MIN);
END LOOP;
END;
/
BEGIN 
SHOW_TIME_SLOT;
END;
/


--3
CREATE OR REPLACE PROCEDURE SORTED_ADVISOR_LIST (N IN NUMBER)
AS 
MAX_ROW NUMBER;
BEGIN
SELECT COUNT(I_ID) INTO MAX_ROW
FROM (SELECT I_ID 
        FROM ADVISOR
        GROUP BY I_ID);

IF(N > MAX_ROW) THEN
    DBMS_OUTPUT . PUT_LINE ('N IS TOO LARGE!');
    RETURN;
END IF;

FOR i IN (SELECT * FROM
        (SELECT *
        FROM INSTRUCTOR, (SELECT I_ID
                        FROM (SELECT I_ID, COUNT(S_ID)
                                FROM ADVISOR
                                GROUP BY I_ID
                                ORDER BY COUNT(S_ID) DESC
                             ))
        WHERE I_ID = INSTRUCTOR.ID
        AND INSTRUCTOR.ID IN (SELECT I_ID FROM ADVISOR)) 
        WHERE ROWNUM <=N)LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || i.ID || ', Name: ' || i.NAME || ', DEPT_NAME: ' || i.DEPT_NAME || ', SALARY: ' || i.SALARY);
END LOOP;
END;
/

BEGIN
        SORTED_ADVISOR_LIST(4);
        SORTED_ADVISOR_LIST(7);
END;
/




--4
DROP SEQUENCE STUDENT_SEQ;
CREATE SEQUENCE STUDENT_SEQ
MINVALUE 1
MAXVALUE 10000
START WITH 1
INCREMENT BY 1
CACHE 20;
CREATE OR REPLACE
TRIGGER STUDENT_ID_GENERATOR
BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
:NEW.ID := STUDENT_SEQ . NEXTVAL ;
END ;
/
BEGIN
INSERT INTO STUDENT (NAME, DEPT_NAME, TOT_CRED) VALUES ('NAFISA', 'Biology', 110);
END;
/
SELECT * FROM STUDENT;

--5
DROP TRIGGER ASSIGN_ADVISOR;
CREATE OR REPLACE TRIGGER ASSIGN_ADVISOR
AFTER INSERT ON STUDENT
FOR EACH ROW
DECLARE 
RANDOM_ID ADVISOR.I_ID%TYPE;
BEGIN
SELECT ID INTO RANDOM_ID
FROM (SELECT ID FROM INSTRUCTOR WHERE DEPT_NAME = :NEW.DEPT_NAME ORDER BY DBMS_RANDOM.RANDOM)
WHERE ROWNUM<=1;
INSERT INTO ADVISOR VALUES(:NEW.ID, RANDOM_ID);
END;
/
BEGIN
INSERT INTO STUDENT (NAME, DEPT_NAME, TOT_CRED) VALUES ('SHANTA', 'Comp. Sci.', 43);
END;
/
SELECT * FROM ADVISOR;
